{"version":3,"sources":["actions.js","DigitButton.js","OperationButton.js","Footer.js","App.js","index.js"],"names":["ACTIONS","DigitButton","dispatch","digit","onClick","type","payload","OperationButton","operation","Footer","className","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","length","slice","prev","parseFloat","curr","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b63d395.chunk.js","sourcesContent":["export const ACTIONS = {\r\n    ADD_DIGIT: 'add-digit',\r\n    CHOOSE_OPERATION: 'choose-operation',\r\n    CLEAR: 'clear',\r\n    DELETE_DIGIT: 'delete-digit',\r\n    EVALUATE: 'evaluate',\r\n}\r\n","import { ACTIONS } from './actions'\r\n\r\nconst DigitButton = ({ dispatch, digit }) => {\r\n    return (\r\n        <button\r\n            onClick={() =>\r\n                dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })\r\n            }\r\n        >\r\n            {digit}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default DigitButton\r\n","import { ACTIONS } from './actions'\r\n\r\nconst OperationButton = ({ dispatch, operation }) => {\r\n    return (\r\n        <button\r\n            onClick={() =>\r\n                dispatch({\r\n                    type: ACTIONS.CHOOSE_OPERATION,\r\n                    payload: { operation },\r\n                })\r\n            }\r\n        >\r\n            {operation}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default OperationButton\r\n","const Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <footer>Made with ❤️ by Vibhu</footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { useReducer } from 'react'\r\nimport { ACTIONS } from './actions'\r\nimport DigitButton from './DigitButton'\r\nimport OperationButton from './OperationButton'\r\nimport Footer from './Footer'\r\n\r\nimport './styles.css'\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n        case ACTIONS.ADD_DIGIT:\r\n            if (state.overwrite) {\r\n                return {\r\n                    ...state,\r\n                    currentOperand: payload.digit,\r\n                    overwrite: false,\r\n                }\r\n            }\r\n            if (payload.digit === '0' && state.currentOperand === '0') {\r\n                return state\r\n            }\r\n            if (\r\n                payload.digit === '.' &&\r\n                (state.currentOperand == null ||\r\n                    state.currentOperand.includes('.'))\r\n            ) {\r\n                return state\r\n            }\r\n            return {\r\n                ...state,\r\n                currentOperand: `${state.currentOperand || ''}${payload.digit}`,\r\n            }\r\n\r\n        case ACTIONS.CHOOSE_OPERATION:\r\n            if (state.currentOperand == null && state.previousOperand == null) {\r\n                return state\r\n            }\r\n            if (state.previousOperand == null) {\r\n                return {\r\n                    ...state,\r\n                    operation: payload.operation,\r\n                    previousOperand: state.currentOperand,\r\n                    currentOperand: null,\r\n                }\r\n            }\r\n            if (state.currentOperand == null) {\r\n                return {\r\n                    ...state,\r\n                    operation: payload.operation,\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                operation: payload.operation,\r\n                previousOperand: evaluate(state),\r\n                currentOperand: null,\r\n            }\r\n\r\n        case ACTIONS.EVALUATE:\r\n            if (\r\n                state.currentOperand == null ||\r\n                state.operation == null ||\r\n                state.previousOperand == null\r\n            ) {\r\n                return state\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                overwrite: true,\r\n                previousOperand: null,\r\n                operation: null,\r\n                currentOperand: evaluate(state),\r\n            }\r\n\r\n        case ACTIONS.DELETE_DIGIT:\r\n            if (state.overwrite) {\r\n                return {\r\n                    ...state,\r\n                    overwrite: false,\r\n                    currentOperand: null,\r\n                }\r\n            }\r\n            if (state.currentOperand == null) {\r\n                return state\r\n            }\r\n            if (state.currentOperand.length === 1) {\r\n                return {\r\n                    ...state,\r\n                    currentOperand: null,\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                currentOperand: state.currentOperand.slice(0, -1),\r\n            }\r\n\r\n        case ACTIONS.CLEAR:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst evaluate = ({ currentOperand, previousOperand, operation }) => {\r\n    const prev = parseFloat(previousOperand)\r\n    const curr = parseFloat(currentOperand)\r\n    if (isNaN(prev) || isNaN(curr)) return ''\r\n    let computation = ''\r\n    switch (operation) {\r\n        case '+':\r\n            computation = prev + curr\r\n            break\r\n        case '-':\r\n            computation = prev - curr\r\n            break\r\n        case '×':\r\n            computation = prev * curr\r\n            break\r\n        case '÷':\r\n            computation = prev / curr\r\n            break\r\n        default:\r\n            computation = ''\r\n    }\r\n\r\n    return computation.toString()\r\n}\r\n\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat('en-us', {\r\n    maximumFractionDigits: 0,\r\n})\r\n\r\nconst formatOperand = (operand) => {\r\n    if (operand == null) {\r\n        return\r\n    }\r\n    const [integer, decimal] = operand.split('.')\r\n    if (decimal == null) {\r\n        return INTEGER_FORMATTER.format(integer)\r\n    }\r\n    return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\r\n}\r\n\r\nconst App = () => {\r\n    const [{ currentOperand, previousOperand, operation }, dispatch] =\r\n        useReducer(reducer, {})\r\n    return (\r\n        <>\r\n            <div className=\"calculator-grid\">\r\n                <div className=\"output\">\r\n                    <div className=\"previous-operand\">\r\n                        {formatOperand(previousOperand)} {operation}\r\n                    </div>\r\n                    <div className=\"current-operand\">\r\n                        {formatOperand(currentOperand)}\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    className=\"span-two\"\r\n                    onClick={() => dispatch({ type: ACTIONS.CLEAR })}\r\n                >\r\n                    AC\r\n                </button>\r\n                <button\r\n                    onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}\r\n                >\r\n                    DEL\r\n                </button>\r\n                <OperationButton operation=\"÷\" dispatch={dispatch} />\r\n                <DigitButton digit=\"1\" dispatch={dispatch} />\r\n                <DigitButton digit=\"2\" dispatch={dispatch} />\r\n                <DigitButton digit=\"3\" dispatch={dispatch} />\r\n                <OperationButton operation=\"×\" dispatch={dispatch} />\r\n                <DigitButton digit=\"4\" dispatch={dispatch} />\r\n                <DigitButton digit=\"5\" dispatch={dispatch} />\r\n                <DigitButton digit=\"6\" dispatch={dispatch} />\r\n                <OperationButton operation=\"+\" dispatch={dispatch} />\r\n                <DigitButton digit=\"7\" dispatch={dispatch} />\r\n                <DigitButton digit=\"8\" dispatch={dispatch} />\r\n                <DigitButton digit=\"9\" dispatch={dispatch} />\r\n                <OperationButton operation=\"-\" dispatch={dispatch} />\r\n                <DigitButton digit=\".\" dispatch={dispatch} />\r\n                <DigitButton digit=\"0\" dispatch={dispatch} />\r\n                <button\r\n                    className=\"span-two\"\r\n                    onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\r\n                >\r\n                    =\r\n                </button>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}